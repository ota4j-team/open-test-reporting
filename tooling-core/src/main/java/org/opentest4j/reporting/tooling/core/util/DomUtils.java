/*
 * Copyright 2021-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.reporting.tooling.core.util;

import org.opentest4j.reporting.schema.QualifiedName;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.util.function.IntFunction;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * Internal utils to work with DOM types
 */
public class DomUtils {

	private DomUtils() {
	}

	/**
	 * Stream the nodes of the supplied node list.
	 *
	 * @param nodeList the node list to stream
	 * @return a stream of the nodes in the node list
	 */
	public static Stream<Node> stream(NodeList nodeList) {
		return stream(nodeList.getLength(), nodeList::item);
	}

	/**
	 * Stream the nodes of the supplied named node map.
	 *
	 * @param namedNodeMap the named node map to stream
	 * @return a stream of the nodes in the named node map
	 */
	public static Stream<Node> stream(NamedNodeMap namedNodeMap) {
		return stream(namedNodeMap.getLength(), namedNodeMap::item);
	}

	private static Stream<Node> stream(int length, IntFunction<Node> item) {
		return IntStream.range(0, length).mapToObj(item);
	}

	/**
	 * Check whether the simple name and namespace of the supplied element
	 * match the supplied qualified name.
	 *
	 * @param qualifiedName the qualified name to match
	 * @param element the element to check
	 * @return {@code true} if the element matches the qualified name
	 */
	public static boolean matches(QualifiedName qualifiedName, Element element) {
		return qualifiedName.getNamespace().getUri().equals(element.getNamespaceURI())
				&& qualifiedName.getSimpleName().equals(element.getLocalName());
	}
}
