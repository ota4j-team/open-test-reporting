/*
 * Copyright 2021-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.reporting.tooling.core.htmlreport;

import org.apiguardian.api.API;
import org.opentest4j.reporting.events.core.Attachments;
import org.opentest4j.reporting.events.core.CpuCores;
import org.opentest4j.reporting.events.core.Data;
import org.opentest4j.reporting.events.core.File;
import org.opentest4j.reporting.events.core.FilePosition;
import org.opentest4j.reporting.events.core.HostName;
import org.opentest4j.reporting.events.core.Infrastructure;
import org.opentest4j.reporting.events.core.Metadata;
import org.opentest4j.reporting.events.core.OperatingSystem;
import org.opentest4j.reporting.events.core.Reason;
import org.opentest4j.reporting.events.core.Result;
import org.opentest4j.reporting.events.core.Sources;
import org.opentest4j.reporting.events.core.Tag;
import org.opentest4j.reporting.events.core.Tags;
import org.opentest4j.reporting.events.core.UserName;
import org.opentest4j.reporting.schema.QualifiedName;
import org.opentest4j.reporting.tooling.core.util.DomUtils;
import org.opentest4j.reporting.tooling.spi.htmlreport.Contributor;
import org.opentest4j.reporting.tooling.spi.htmlreport.Image;
import org.opentest4j.reporting.tooling.spi.htmlreport.KeyValuePairs;
import org.opentest4j.reporting.tooling.spi.htmlreport.Labels;
import org.opentest4j.reporting.tooling.spi.htmlreport.Paragraph;
import org.opentest4j.reporting.tooling.spi.htmlreport.Section;
import org.opentest4j.reporting.tooling.spi.htmlreport.Subsections;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.function.BiConsumer;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static org.apiguardian.api.API.Status.INTERNAL;
import static org.opentest4j.reporting.tooling.core.util.DomUtils.matches;
import static org.opentest4j.reporting.tooling.core.util.DomUtils.stream;

/**
 * Contributes sections to the HTML report elements in the core schema.
 *
 * @since 0.2.0
 */
@API(status = INTERNAL, since = "0.2.0")
public class CoreContributor implements Contributor {

	/**
	 * Create a new instance.
	 */
	public CoreContributor() {
	}

	@Override
	public List<Section> contributeSectionsForExecution(Context context) {
		var sections = new ArrayList<Section>();
		createInfrastructureSection(context.element()).ifPresent(sections::add);
		return sections;
	}

	@Override
	public List<Section> contributeSectionsForTestNode(Context context) {
		var sections = new ArrayList<Section>();
		createTagsSection(context.element()).ifPresent(sections::add);
		createSourcesSection(context.element()).ifPresent(sections::add);
		createReasonSection(context.element()).ifPresent(sections::add);
		createAttachmentsSection(context).ifPresent(sections::add);
		return sections;
	}

	private static Optional<Section> createInfrastructureSection(Element element) {
		return findChild(element, Infrastructure.ELEMENT) //
				.map(infrastructure -> {
					var table = new LinkedHashMap<String, String>();
					addToTable(infrastructure, HostName.ELEMENT, "Hostname", table::put);
					addToTable(infrastructure, UserName.ELEMENT, "Username", table::put);
					addToTable(infrastructure, OperatingSystem.ELEMENT, "Operating system", table::put);
					addToTable(infrastructure, CpuCores.ELEMENT, "CPU cores", table::put);
					return table.isEmpty() ? null : table;
				}) //
				.map(table -> {
					var keyValuePairs = KeyValuePairs.builder().content(table).build();
					return Section.builder().title("Infrastructure").addBlock(keyValuePairs).build();
				});
	}

	private static Optional<Section> createTagsSection(Element element) {
		return findChild(element, Metadata.ELEMENT) //
				.flatMap(metadata -> findChild(metadata, Tags.ELEMENT)) //
				.map(tags -> findChildren(tags, Tag.ELEMENT)) //
				.map(tags -> tags.map(Node::getTextContent).sorted().toList()) //
				.filter(sortedTags -> !sortedTags.isEmpty()) //
				.map(sortedTags -> Labels.builder().content(sortedTags).build()) //
				.map(labels -> Section.builder().title("Tags").order(0).addBlock(labels).build());
	}

	private static Optional<Section> createSourcesSection(Element element) {
		var children = findChild(element, Sources.ELEMENT) //
				.map(CoreContributor::children) //
				.orElseGet(Stream::empty) //
				.toList();

		if (children.isEmpty()) {
			return Optional.empty();
		}
		var subsections = Subsections.builder();
		children.stream().map(child -> {
			var type = child.getLocalName();
			if (child.getLocalName().endsWith("Source")) {
				type = child.getLocalName().substring(0, child.getLocalName().length() - "Source".length());
			}
			var subsection = Section.builder().title(capitalize(type));

			var attributes = KeyValuePairs.builder();
			stream(child.getAttributes()) //
					.filter(it -> it.getNodeValue() != null && !it.getNodeValue().isEmpty()) //
					.forEach(it -> attributes.putContent(it.getNodeName(), it.getNodeValue()));

			var filePosition = findChild(child, FilePosition.ELEMENT);
			filePosition //
					.flatMap(it -> getAttributeValue(it, FilePosition.LINE)) //
					.map(line -> attributes.putContent("line", line));
			filePosition //
					.flatMap(it -> getAttributeValue(it, FilePosition.COLUMN)) //
					.map(column -> attributes.putContent("column", column));

			subsection.addBlock(attributes.build());
			return subsection.build();
		}).forEach(subsections::addContent);

		return Optional.of(Section.builder().title("Sources").order(10).addBlock(subsections.build()).build());
	}

	private static Optional<Section> createReasonSection(Element element) {
		return findChild(element, Result.ELEMENT) //
				.flatMap(result -> findChild(result, Reason.ELEMENT)) //
				.map(Node::getTextContent) //
				.map(reason -> {
					var paragraph = Paragraph.builder().content(reason).build();
					return Section.builder().title("Reason").order(20).addBlock(paragraph).build();
				});
	}

	private static Optional<Section> createAttachmentsSection(Context context) {
		var children = findChild(context.element(), Attachments.ELEMENT) //
				.map(CoreContributor::children) //
				.orElseGet(Stream::empty) //
				.toList();
		if (children.isEmpty()) {
			return Optional.empty();
		}

		var subsections = Subsections.builder();
		children.stream().map(child -> {
			var type = child.getLocalName();
			var section = Section.builder().title(capitalize(type));
			if (matches(File.ELEMENT, child)) {
				var attributes = KeyValuePairs.builder();
				getAttributeValue(child, File.TIME).ifPresent(time -> attributes.putContent("time", time));
				getAttributeValue(child, File.PATH).ifPresent(rawPath -> {
					var originalPath = context.sourceXmlFile().getParent().resolve(rawPath).toAbsolutePath();
					var path = tryRelativize(context.targetHtmlFile().getParent(), originalPath);
					var filename = path.getFileName().toString();
					filename = filename.substring(Math.max(filename.lastIndexOf('/'), filename.lastIndexOf('\\')) + 1);
					attributes.putContent("filename", filename);
					attributes.putContent("path", "link:" + path);
					if (filename.endsWith(".png") || filename.endsWith(".jpg") || filename.endsWith(".jpeg")) {
						section.addBlock(Image.builder().content(path.toString()).altText(filename).build());
					}
				});
				section.addBlock(attributes.build());
			}
			else if (matches(Data.ELEMENT, child)) {
				var attributes = KeyValuePairs.builder();
				getAttributeValue(child, Data.TIME).ifPresent(time -> attributes.putContent("time", time));
				findChildren(child, Data.Entry.ELEMENT).forEach(entry -> {
					getAttributeValue(entry, Data.Entry.KEY).ifPresent(key -> {
						var value = entry.getTextContent();
						attributes.putContent(key, value);
					});
				});
				section.addBlock(attributes.build());
			}
			return section.build();
		}).forEach(subsections::addContent);

		return Optional.of(Section.builder().title("Attachments").order(30).addBlock(subsections.build()).build());
	}

	private static Path tryRelativize(Path parent, Path path) {
		try {
			return parent.relativize(path);
		}
		catch (IllegalArgumentException e) {
			// This can happen on Windows if the paths are on different drives
			return path;
		}
	}

	static void addToTable(Node parent, QualifiedName elementName, String label, BiConsumer<String, String> table) {
		findChild(parent, elementName) //
				.map(Node::getTextContent) //
				.ifPresent(value -> table.accept(label, value));
	}

	static Optional<Node> findChild(Node parent, QualifiedName elementName) {
		return children(parent) //
				.filter(child -> DomUtils.matches(elementName, child)) //
				.findFirst();
	}

	static Stream<Node> findChildren(Node parent, QualifiedName elementName) {
		return children(parent) //
				.filter(child -> DomUtils.matches(elementName, child));
	}

	private static Stream<Node> children(Node parent) {
		var childNodes = parent.getChildNodes();
		return IntStream.range(0, childNodes.getLength()) //
				.mapToObj(childNodes::item);
	}

	static Optional<String> getAttributeValue(Node node, QualifiedName elementName) {
		return getAttribute(node, elementName).map(Node::getNodeValue);
	}

	private static Optional<Node> getAttribute(Node node, QualifiedName elementName) {
		var attributes = node.getAttributes();
		var namespaceURI = elementName.getNamespace().getUri();
		var simpleName = elementName.getSimpleName();
		return Optional.ofNullable(attributes.getNamedItemNS(namespaceURI, simpleName)) //
				.or(() -> Optional.ofNullable(attributes.getNamedItem(simpleName)));
	}

	private static String capitalize(String value) {
		return value.substring(0, 1).toUpperCase(Locale.ROOT) + value.substring(1);
	}

}
