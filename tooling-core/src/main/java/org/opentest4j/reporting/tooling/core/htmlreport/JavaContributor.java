package org.opentest4j.reporting.tooling.core.htmlreport;

import org.joox.Match;
import org.opentest4j.reporting.tooling.spi.htmlreport.Contributor;
import org.opentest4j.reporting.tooling.spi.htmlreport.KeyValuePairs;
import org.opentest4j.reporting.tooling.spi.htmlreport.PreFormattedOutput;
import org.opentest4j.reporting.tooling.spi.htmlreport.Section;
import org.opentest4j.reporting.tooling.spi.htmlreport.Subsections;
import org.w3c.dom.Element;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Optional;

import static org.joox.JOOX.$;
import static org.opentest4j.reporting.tooling.core.htmlreport.CoreContributor.addToTable;

public class JavaContributor implements Contributor {

    @Override
    public List<Section> contributeSectionsForExecution(Element executionElement) {
        var sections = new ArrayList<Section>();
        var infrastructure = $(executionElement).child("infrastructure");
        createJvmSection(infrastructure).ifPresent(sections::add);
        return sections;
    }

    @Override
    public List<Section> contributeSectionsForTestNode(Element testNodeElement) {
        var sections = new ArrayList<Section>();
        createResultSection(testNodeElement).ifPresent(sections::add);
        return sections;
    }

    private static Optional<Section> createJvmSection(Match infrastructure) {
        var table = new LinkedHashMap<String, String>();
        addToTable(infrastructure, "javaVersion", "Java version", table);
        addToTable(infrastructure, "fileEncoding", "File encoding", table);
        String maxHeapSize = infrastructure.child("heapSize").attr("max");
        if (maxHeapSize != null) {
            table.put("Max heap size", String.format("%s (%s bytes)", toHumanReadableFormat(Long.parseLong(maxHeapSize)), maxHeapSize));
        }

        if (table.isEmpty()) {
            return Optional.empty();
        }

        return Optional.of(Section.builder()
                .title("Java Virtual Machine")
                .order(10)
                .addBlock(KeyValuePairs.builder().content(table).build())
                .build());
    }

    private static Optional<Section> createResultSection(Element element) {
        var content = $(element).child("result").children("throwable")
                .map(throwable -> {
                    var type = throwable.match().getAttribute("type");
                    var stackTrace = throwable.match().getTextContent();
                    return Section.builder()
                            .title(type)
                            .addBlock(PreFormattedOutput.builder().content(stackTrace).build())
                            .build();
                });

        if (content.isEmpty()) {
            return Optional.empty();
        }
        return Optional.of(Section.builder()
                .title("Result")
                .addBlock(Subsections.builder().content(content).build())
                .build());
    }

    // Adapted from https://www.baeldung.com/java-human-readable-byte-size#using-the-longnumberofleadingzeros-method
    private static String toHumanReadableFormat(long size) {
        if (size < 1024) return size + " B";
        int unitIdx = (63 - Long.numberOfLeadingZeros(size)) / 10;
        return formatSize(size, 1L << (unitIdx * 10), " KMGTPE".charAt(unitIdx) + "iB");
    }

    private static String formatSize(long size, long divider, String unitName) {
        return new DecimalFormat("#.##", new DecimalFormatSymbols(Locale.US))
                .format((double) size / divider) + " " + unitName;
    }
}
